{"version":3,"file":"static/js/666.f16d6c7c.chunk.js","mappings":"mLAEA,MAqnCA,EArnCqB,CACjBA,KAAM,aACNC,QAAS,q9GA8DTC,YAAa,6CACbC,YAAa,kBACbC,IAAK,ikYAygBLC,QAAS,CACLC,QAAQ,EACRC,UAAW,mBACXC,MAAO,mGAKPC,KAAM,CAAC,CACXC,MAAO,2BACPR,YAAa,kEACbS,KAAM,s0CAmDNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,UAAW,KAEb,CACEH,MAAO,UACPR,YAAa,wCACbS,KAAM,4tEAiENC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,KAEb,CACEH,MAAO,eACPR,YAAa,2CACbS,KAAM,+yEAwENC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,KAEb,CACEH,MAAO,QACPR,YAAa,sCACbS,KAAM,4sHAiHNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,KAEb,CACEH,MAAO,eACPR,YAAa,uCACbS,KAAM,28GA0GNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,KAEb,CACEH,MAAO,2BACPR,YAAa,kEACbS,KAAM,q0DAwENC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,UAAW,O","sources":["../../README.md"],"sourcesContent":["import * as component_1 from '@kne/current-lib_react-form';\nimport * as component_2 from 'antd';\nconst readmeConfig = {\n    name: `react-form`,\n    summary: `<p>react-form是一个功能强大的React表单库，提供了完整的表单状态管理、验证和提交解决方案。</p>\n<h3>核心特性</h3>\n<h4>状态管理</h4>\n<ul>\n<li>使用React的状态管理机制管理表单状态</li>\n<li>支持复杂的表单状态结构</li>\n<li>提供表单状态的实时更新和访问</li>\n</ul>\n<h4>事件系统</h4>\n<ul>\n<li>使用事件发射器模式实现表单内部通信</li>\n<li>支持多种表单事件，如提交、验证、重置等</li>\n<li>允许自定义事件处理逻辑</li>\n</ul>\n<h4>字段管理</h4>\n<ul>\n<li>动态添加、更新和移除表单字段</li>\n<li>支持字段级别的状态管理</li>\n<li>提供字段值的获取和设置方法</li>\n</ul>\n<h4>验证系统</h4>\n<ul>\n<li>支持表单和字段级别的验证</li>\n<li>提供内置验证规则</li>\n<li>支持自定义验证逻辑</li>\n<li>实时验证和提交验证</li>\n</ul>\n<h4>数据处理</h4>\n<ul>\n<li>支持表单数据的获取、设置和重置</li>\n<li>提供数据转换和格式化功能</li>\n<li>支持初始数据设置</li>\n</ul>\n<h4>分组管理</h4>\n<ul>\n<li>支持表单字段的分组</li>\n<li>允许动态添加和移除分组</li>\n<li>支持分组级别的操作和验证</li>\n</ul>\n<h3>架构设计</h3>\n<h4>组件结构</h4>\n<ul>\n<li>Form：表单的主要容器，负责状态管理和上下文提供</li>\n<li>Field：表单字段组件，负责单个字段的渲染和交互</li>\n<li>Group：表单分组组件，用于管理相关字段的集合</li>\n<li>GroupList：动态分组列表，支持添加和移除分组</li>\n</ul>\n<h4>核心模块</h4>\n<ul>\n<li>事件系统：处理表单内部的事件通信</li>\n<li>验证系统：处理表单和字段的验证逻辑</li>\n<li>拦截器：提供表单操作的拦截和修改能力</li>\n<li>任务系统：管理表单的异步任务</li>\n</ul>\n<h3>使用场景</h3>\n<ul>\n<li>复杂表单开发</li>\n<li>动态表单生成</li>\n<li>表单验证和提交</li>\n<li>多步骤表单流程</li>\n<li>表单数据管理</li>\n</ul>`,\n    description: `用于表单的校验`,\n    packageName: `@kne/react-form`,\n    api: `<h3>Form组件API</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>initialValues</td>\n<td>表单初始值</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>onSubmit</td>\n<td>表单提交回调函数</td>\n<td>function(values, form)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onSubmitFail</td>\n<td>表单提交失败回调函数</td>\n<td>function(errors, form)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onReset</td>\n<td>表单重置回调函数</td>\n<td>function(form)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onValidate</td>\n<td>表单验证回调函数</td>\n<td>function(values, form)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>interceptors</td>\n<td>表单拦截器</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>children</td>\n<td>表单内容</td>\n<td>React.ReactNode</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>示例</h4>\n<pre><code class=\"language-jsx\">import { Form, Field } from 'react-form';\n\nconst MyForm = () =&gt; {\n  const handleSubmit = (values) =&gt; {\n    console.log('Form values:', values);\n  };\n\n  return (\n    &lt;Form\n      initialValues={{ name: 'John', email: '' }}\n      onSubmit={handleSubmit}\n    &gt;\n      &lt;Field name=\"name\" label=\"Name\" /&gt;\n      &lt;Field name=\"email\" label=\"Email\" /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/Form&gt;\n  );\n};\n</code></pre>\n<h3>useOpenApi钩子API</h3>\n<p>useOpenApi钩子提供了一组用于操作表单的方法。</p>\n<h4>返回值</h4>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n<th>参数</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getValues</td>\n<td>获取表单所有字段的值</td>\n<td>-</td>\n<td>object</td>\n</tr>\n<tr>\n<td>getValue</td>\n<td>获取指定字段的值</td>\n<td>(name: string)</td>\n<td>any</td>\n</tr>\n<tr>\n<td>setValues</td>\n<td>设置表单多个字段的值</td>\n<td>(values: object, runValidate?: boolean)</td>\n<td>void</td>\n</tr>\n<tr>\n<td>setValue</td>\n<td>设置指定字段的值</td>\n<td>(name: string, value: any, runValidate?: boolean)</td>\n<td>void</td>\n</tr>\n<tr>\n<td>setFields</td>\n<td>设置表单字段的属性</td>\n<td>(fields: array, runValidate?: boolean)</td>\n<td>void</td>\n</tr>\n<tr>\n<td>resetFields</td>\n<td>重置表单字段</td>\n<td>-</td>\n<td>void</td>\n</tr>\n<tr>\n<td>submit</td>\n<td>提交表单</td>\n<td>-</td>\n<td>Promise</td>\n</tr>\n<tr>\n<td>validate</td>\n<td>验证表单</td>\n<td>(names?: string[])</td>\n<td>Promise&lt;boolean&gt;</td>\n</tr>\n<tr>\n<td>getFieldError</td>\n<td>获取指定字段的错误信息</td>\n<td>(name: string)</td>\n<td>string</td>\n</tr>\n<tr>\n<td>getErrors</td>\n<td>获取表单所有字段的错误信息</td>\n<td>-</td>\n<td>object</td>\n</tr>\n<tr>\n<td>isFieldTouched</td>\n<td>判断字段是否被用户操作过</td>\n<td>(name: string)</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>isFieldValidating</td>\n<td>判断字段是否正在验证</td>\n<td>(name: string)</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>getFieldsValue</td>\n<td>获取多个字段的值</td>\n<td>(nameList: string[])</td>\n<td>object</td>\n</tr>\n</tbody>\n</table>\n<h4>示例</h4>\n<pre><code class=\"language-jsx\">import { Form, useOpenApi } from 'react-form';\n\nconst FormWithApi = () =&gt; {\n  const formApi = useOpenApi();\n  \n  const handleClick = () =&gt; {\n    formApi.setValue('name', 'New Name');\n    console.log(formApi.getValues());\n  };\n\n  return (\n    &lt;Form&gt;\n      &lt;Field name=\"name\" label=\"Name\" /&gt;\n      &lt;Field name=\"email\" label=\"Email\" /&gt;\n      &lt;button type=\"button\" onClick={handleClick}&gt;\n        Update Name\n      &lt;/button&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/Form&gt;\n  );\n};\n</code></pre>\n<h3>Field组件API</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>字段名称</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>label</td>\n<td>字段标签</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>默认值</td>\n<td>any</td>\n<td>-</td>\n</tr>\n<tr>\n<td>rules</td>\n<td>验证规则</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>children</td>\n<td>自定义渲染函数</td>\n<td>function(field)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>值变化回调</td>\n<td>function(value, field)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onBlur</td>\n<td>失焦回调</td>\n<td>function(e, field)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onFocus</td>\n<td>聚焦回调</td>\n<td>function(e, field)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>示例</h4>\n<pre><code class=\"language-jsx\">import { Form, Field } from 'react-form';\n\nconst MyForm = () =&gt; {\n  return (\n    &lt;Form&gt;\n      &lt;Field\n        name=\"username\"\n        label=\"Username\"\n        defaultValue=\"\"\n        rules={[\n          { required: true, message: 'Please input your username!' },\n          { min: 3, message: 'Username must be at least 3 characters' }\n        ]}\n      &gt;\n        {({ value, onChange, error }) =&gt; (\n          &lt;div&gt;\n            &lt;input value={value} onChange={e =&gt; onChange(e.target.value)} /&gt;\n            {error &amp;&amp; &lt;div className=\"error\"&gt;{error}&lt;/div&gt;}\n          &lt;/div&gt;\n        )}\n      &lt;/Field&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/Form&gt;\n  );\n};\n</code></pre>\n<h3>Group组件API</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>分组名称</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>children</td>\n<td>分组内容</td>\n<td>React.ReactNode</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>GroupList组件属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>分组列表名称</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>children</td>\n<td>分组模板</td>\n<td>function(index)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>defaultLength</td>\n<td>初始分组数量</td>\n<td>number</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h4>示例</h4>\n<pre><code class=\"language-jsx\">import { Form, Field, Group, GroupList } from 'react-form';\n\nconst MyForm = () =&gt; {\n  return (\n    &lt;Form&gt;\n      &lt;GroupList name=\"contacts\" defaultLength={1}&gt;\n        {(index) =&gt; (\n          &lt;Group name={index}&gt;\n            &lt;Field name=\"name\" label=\"Name\" /&gt;\n            &lt;Field name=\"phone\" label=\"Phone\" /&gt;\n          &lt;/Group&gt;\n        )}\n      &lt;/GroupList&gt;\n      &lt;button type=\"button\" onClick={() =&gt; formApi.addGroup('contacts')}&gt;\n        Add Contact\n      &lt;/button&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/Form&gt;\n  );\n};\n</code></pre>\n<h3>表单验证规则API</h3>\n<h4>内置规则</h4>\n<table>\n<thead>\n<tr>\n<th>规则名</th>\n<th>说明</th>\n<th>参数类型</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>required</td>\n<td>必填字段</td>\n<td>boolean</td>\n<td>{ required: true, message: '必填字段' }</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小长度/值</td>\n<td>number</td>\n<td>{ min: 3, message: '最小长度为3' }</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大长度/值</td>\n<td>number</td>\n<td>{ max: 10, message: '最大长度为10' }</td>\n</tr>\n<tr>\n<td>pattern</td>\n<td>正则表达式匹配</td>\n<td>RegExp</td>\n<td>{ pattern: /^\\d+$/, message: '必须为数字' }</td>\n</tr>\n<tr>\n<td>validator</td>\n<td>自定义验证函数</td>\n<td>function</td>\n<td>{ validator: (value) =&gt; value === 'test' ? '' : '验证失败' }</td>\n</tr>\n</tbody>\n</table>\n<h4>示例</h4>\n<pre><code class=\"language-jsx\">import { Form, Field } from 'react-form';\n\nconst MyForm = () =&gt; {\n  return (\n    &lt;Form&gt;\n      &lt;Field\n        name=\"email\"\n        label=\"Email\"\n        rules={[\n          { required: true, message: '请输入邮箱' },\n          { pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/, message: '邮箱格式不正确' }\n        ]}\n      /&gt;\n      &lt;Field\n        name=\"password\"\n        label=\"Password\"\n        rules={[\n          { required: true, message: '请输入密码' },\n          { min: 6, message: '密码长度不能小于6位' },\n          { \n            validator: (value) =&gt; {\n              if (!/[A-Z]/.test(value)) {\n                return '密码必须包含大写字母';\n              }\n              return '';\n            }\n          }\n        ]}\n      /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/Form&gt;\n  );\n};\n</code></pre>\n<h3>表单拦截器API</h3>\n<p>拦截器可以在表单操作的不同阶段进行拦截和修改。</p>\n<h4>可用拦截器</h4>\n<table>\n<thead>\n<tr>\n<th>拦截器名</th>\n<th>说明</th>\n<th>参数</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>beforeSubmit</td>\n<td>表单提交前拦截</td>\n<td>(values, form)</td>\n<td>values或Promise</td>\n</tr>\n<tr>\n<td>afterSubmit</td>\n<td>表单提交后拦截</td>\n<td>(result, form)</td>\n<td>result或Promise</td>\n</tr>\n<tr>\n<td>beforeValidate</td>\n<td>表单验证前拦截</td>\n<td>(values, form)</td>\n<td>values或Promise</td>\n</tr>\n<tr>\n<td>afterValidate</td>\n<td>表单验证后拦截</td>\n<td>(errors, form)</td>\n<td>errors或Promise</td>\n</tr>\n<tr>\n<td>beforeReset</td>\n<td>表单重置前拦截</td>\n<td>(form)</td>\n<td>void或Promise</td>\n</tr>\n<tr>\n<td>afterReset</td>\n<td>表单重置后拦截</td>\n<td>(form)</td>\n<td>void或Promise</td>\n</tr>\n</tbody>\n</table>\n<h4>示例</h4>\n<pre><code class=\"language-jsx\">import { Form, Field } from 'react-form';\n\nconst MyForm = () =&gt; {\n  const interceptors = {\n    beforeSubmit: (values) =&gt; {\n      console.log('Before submit:', values);\n      // 可以修改values\n      return {\n        ...values,\n        timestamp: Date.now()\n      };\n    },\n    afterSubmit: (result) =&gt; {\n      console.log('After submit:', result);\n      return result;\n    }\n  };\n\n  return (\n    &lt;Form\n      interceptors={interceptors}\n      onSubmit={(values) =&gt; console.log('Submit:', values)}\n    &gt;\n      &lt;Field name=\"name\" label=\"Name\" /&gt;\n      &lt;Field name=\"email\" label=\"Email\" /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/Form&gt;\n  );\n};\n</code></pre>`,\n    example: {\n        isFull: false,\n        className: `react_form_5f21f`,\n        style: `.react_form_5f21f .ant-card {\n  border-color: black;\n  text-align: center;\n  width: 200px;\n}`,\n        list: [{\n    title: `基本示例`,\n    description: `简单的form到input组件的绑定`,\n    code: `const { default: ReactForm, useField, useSubmit, useReset } = _ReactForm;\n\nconst Input = props => {\n  const fieldProps = useField(props);\n\n  return (<div>\n    {fieldProps.label}\n    <input ref={fieldProps.fieldRef} type=\"text\" value={fieldProps.value || ''} onChange={fieldProps.onChange}\n           onBlur={fieldProps.triggerValidate} />\n    {fieldProps.errState}\n    {fieldProps.errMsg}\n  </div>);\n};\n\nconst SubmitButton = ({ children }) => {\n  const { isLoading, onClick } = useSubmit();\n  return (<button onClick={onClick}>\n    {children}\n    {isLoading ? '正在提交中...' : ''}\n  </button>);\n};\n\nconst ResetButton = () => {\n  const { onClick } = useReset();\n  return <button onClick={onClick}>重置</button>;\n};\n\nconst BaseExample = () => {\n  return <div>\n    <ReactForm debug data={{\n      name: '哈哈哈'\n    }} onSubmit={async (data) => {\n      await new Promise((resolve)=>{\n        setTimeout(() => {\n          resolve();\n        },3000);\n      });\n      console.log('submit:', data);\n    }}>\n      <Input name=\"name\" label=\"名称\" rule=\"REQ LEN-0-10\" />\n      <div>\n        <SubmitButton>提交</SubmitButton>\n        <ResetButton>重置</ResetButton>\n      </div>\n    </ReactForm>\n  </div>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactForm\",\n    packageName: \"@kne/current-lib_react-form\",\n    component: component_1\n}]\n},{\n    title: `openApi`,\n    description: `展示openApi的使用`,\n    code: `const { default: ReactForm, useField, useSubmit, useReset } = _ReactForm;\nconst { useRef } = React;\nconst { Button, Space } = antd;\n\nconst Input = props => {\n  const fieldProps = useField(props);\n\n  return (<div>\n    {fieldProps.label}\n    <input ref={fieldProps.fieldRef} type=\"text\" value={fieldProps.value || ''} onChange={fieldProps.onChange}\n           onBlur={fieldProps.triggerValidate} />\n    {fieldProps.errState}\n    {fieldProps.errMsg}\n  </div>);\n};\n\nconst SubmitButton = ({ children }) => {\n  const { isLoading, onClick } = useSubmit();\n  return (<button onClick={onClick}>\n    {children}\n    {isLoading ? '正在提交中...' : ''}\n  </button>);\n};\n\nconst ResetButton = () => {\n  const { onClick } = useReset();\n  return <button onClick={onClick}>重置</button>;\n};\n\nconst BaseExample = () => {\n  const formApiRef = useRef();\n  return <div>\n    <Space>\n      <Button onClick={() => {\n        console.log(formApiRef.current.data);\n      }}>获取表单值</Button>\n      <Button onClick={() => {\n        formApiRef.current.setField({ name: 'name', value: '哈哈哈' });\n      }}>设置字段值</Button>\n      <Button onClick={() => {\n        formApiRef.current.setFields([{ name: 'name', value: '哈哈哈' }, {\n          name: 'name2', value: '哈哈哈2'\n        }, { name: 'name3', value: '哈哈哈3' }]);\n      }}>设置多个字段值</Button>\n      <Button onClick={() => {\n        formApiRef.current.setFieldValidate({\n          name: 'name2', validate: { status: 2, msg: '我是一个通过api设置的错误' }\n        });\n      }}>设置校验信息</Button>\n    </Space>\n    <ReactForm ref={formApiRef}>\n      <Input name=\"name\" label=\"名称\" rule=\"REQ LEN-0-10\" />\n      <Input name=\"name2\" label=\"名称2\" rule=\"REQ LEN-0-10\" />\n      <Input name=\"name3\" label=\"名称3\" rule=\"REQ LEN-0-10\" />\n      <div>\n        <SubmitButton>提交</SubmitButton>\n        <ResetButton>重置</ResetButton>\n      </div>\n    </ReactForm>\n  </div>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactForm\",\n    packageName: \"@kne/current-lib_react-form\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `use-form-api`,\n    description: `展示useFormApi的使用`,\n    code: `const { default: ReactForm, useField, useSubmit, useReset, useFormApi } = _ReactForm;\nconst { useRef } = React;\nconst { Button, Space } = antd;\n\nconst Input = props => {\n  const fieldProps = useField(props);\n  return (<div>\n    {fieldProps.label}\n    <input ref={fieldProps.fieldRef} type=\"text\" value={fieldProps.value || ''} onChange={fieldProps.onChange}\n           onBlur={fieldProps.triggerValidate} />\n    {fieldProps.errState}\n    {fieldProps.errMsg}\n  </div>);\n};\n\nconst SubmitButton = ({ children }) => {\n  const { isLoading, onClick } = useSubmit();\n  return (<button onClick={onClick}>\n    {children}\n    {isLoading ? '正在提交中...' : ''}\n  </button>);\n};\n\nconst ResetButton = () => {\n  const { onClick } = useReset();\n  return <button onClick={onClick}>重置</button>;\n};\n\nconst Options = () => {\n  const { openApi: formApi } = useFormApi();\n\n  console.log(formApi);\n\n  return <Space>\n    <Button onClick={() => {\n      console.log(formApi.getFormData());\n    }}>获取表单值</Button>\n    <Button onClick={() => {\n      formApi.setField({ name: 'name', value: '哈哈哈' });\n    }}>设置字段值</Button>\n    <Button onClick={() => {\n      formApi.setFields([{ name: 'name', value: '哈哈哈' }, {\n        name: 'name2', value: '哈哈哈2'\n      }, { name: 'name3', value: '哈哈哈3' }]);\n    }}>设置多个字段值</Button>\n    <Button onClick={() => {\n      formApi.setFieldValidate({\n        name: 'name2', validate: { status: 2, msg: '我是一个通过api设置的错误' }\n      });\n    }}>设置校验信息</Button>\n  </Space>;\n};\n\nconst BaseExample = () => {\n  const formApiRef = useRef();\n  return <div>\n    <ReactForm ref={formApiRef}>\n      <div><Options /></div>\n      <Input name=\"name\" label=\"名称\" rule=\"REQ LEN-0-10\" />\n      <Input name=\"name2\" label=\"名称2\" rule=\"REQ LEN-0-10\" />\n      <Input name=\"name3\" label=\"名称3\" rule=\"REQ LEN-0-10\" />\n      <div>\n        <SubmitButton>提交</SubmitButton>\n        <ResetButton>重置</ResetButton>\n      </div>\n    </ReactForm>\n  </div>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactForm\",\n    packageName: \"@kne/current-lib_react-form\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `group`,\n    description: `展示group的使用`,\n    code: `const { default: ReactForm, useField, useSubmit, useReset, GroupList } = _ReactForm;\nconst { useRef } = React;\n\nconst Input = props => {\n  const fieldProps = useField(props);\n\n  return (<div>\n    {fieldProps.label}\n    <input ref={fieldProps.fieldRef} type=\"text\" value={fieldProps.value || ''} onChange={fieldProps.onChange}\n           onBlur={fieldProps.triggerValidate} />\n    {fieldProps.errState}\n    {fieldProps.errMsg}\n  </div>);\n};\n\nconst SubmitButton = ({ children }) => {\n  const { isLoading, onClick } = useSubmit();\n  return (<button onClick={onClick}>\n    {children}\n    {isLoading ? '正在提交中...' : ''}\n  </button>);\n};\n\nconst ResetButton = () => {\n  const { onClick } = useReset();\n  return <button onClick={onClick}>重置</button>;\n};\n\nconst BaseExample = () => {\n  const ref = useRef();\n  const formApiRef = useRef();\n  return <div>\n    <div>\n      <button onClick={() => {\n        formApiRef.current.setField({\n          name: 'name', groupName: 'group', groupIndex: 0, value: '设置group字段值'\n        });\n      }}>\n        设置group第一项name字段值\n      </button>\n      <button onClick={() => {\n        formApiRef.current.setField({\n          name: 'name', groupName: 'group', value: '设置group字段值'\n        });\n      }}>\n        设置group所有项name字段值\n      </button>\n      <button onClick={() => {\n        formApiRef.current.setField({\n          groupName: 'group', groupIndex: 0, value: {\n            name: '名称', des: '说明'\n          }\n        });\n      }}>\n        设置group第一项所有字段值\n      </button>\n      <button onClick={() => {\n        formApiRef.current.setFormData({\n          group: [{ name: '第一项' }, { name: '第二项' }, { name: '第三项' }, { name: '第四项' }, { name: '第五项' }]\n        });\n      }}>设置整个表单的值\n      </button>\n    </div>\n    <ReactForm ref={formApiRef} onSubmit={(data) => {\n      console.log('submit:', data);\n    }}>\n      <div>\n        <button onClick={() => {\n          ref.current.onAdd();\n        }}>倒序添加\n        </button>\n      </div>\n      <GroupList ref={ref} name=\"group\">{({ index, onRemove }) => {\n        return <div>\n          <div>第{index + 1}项</div>\n          <Input name=\"name\" label=\"名称\" rule=\"REQ LEN-0-10\" onChange={() => {\n            console.log(index);\n          }} />\n          <Input name=\"des\" label=\"描述\" rule=\"LEN-0-10\" />\n          <GroupList name=\"inner\">{({ index, onRemove }) => {\n            return <div style={{\n              padding: '10px', background: '#eee'\n            }}>\n              <div>第{index + 1}项</div>\n              <Input name=\"name\" label=\"名称\" rule=\"LEN-0-10\" />\n              <Input name=\"des\" label=\"描述\" rule=\"LEN-0-10\" />\n              <button onClick={() => {\n                onRemove();\n              }}>删除子GroupItem\n              </button>\n            </div>;\n          }}</GroupList>\n          <button onClick={() => {\n            onRemove();\n          }}>删除\n          </button>\n        </div>;\n      }}</GroupList>\n      <button onClick={() => {\n        ref.current.onAdd({ isUnshift: false });\n      }}>顺序添加\n      </button>\n      <div>\n        <SubmitButton>提交</SubmitButton>\n        <ResetButton>重置</ResetButton>\n      </div>\n    </ReactForm>\n  </div>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactForm\",\n    packageName: \"@kne/current-lib_react-form\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `associations`,\n    description: `字段关联关系`,\n    code: `const { default: ReactForm, useField, useSubmit, useReset, GroupList } = _ReactForm;\n\nconst { useRef } = React;\n\nconst Input = props => {\n  const fieldProps = useField(props);\n\n  return (<div>\n    {fieldProps.label}\n    <input {...fieldProps.associationOptions} ref={fieldProps.fieldRef} type=\"text\" value={fieldProps.value || ''}\n           onChange={fieldProps.onChange}\n           onBlur={fieldProps.triggerValidate} />\n    {fieldProps.errState}\n    {fieldProps.errMsg}\n  </div>);\n};\n\nconst SubmitButton = ({ children }) => {\n  const { isLoading, onClick } = useSubmit();\n  return (<button onClick={onClick}>\n    {children}\n    {isLoading ? '正在提交中...' : ''}\n  </button>);\n};\n\nconst ResetButton = () => {\n  const { onClick } = useReset();\n  return <button onClick={onClick}>重置</button>;\n};\n\nconst BaseExample = () => {\n  const ref = useRef(null);\n  return <div>\n    <ReactForm debug onSubmit={(data) => {\n      console.log('submit:', data);\n    }}>\n      <Input name=\"name\" label=\"名称\" rule=\"REQ LEN-0-10\" />\n      <Input name=\"des\" label=\"描述\" rule=\"LEN-0-10\" associations={{\n        fields: [{\n          name: 'name'\n        }], callback: ({ target, origin, openApi }) => {\n          openApi.setFieldValue(target, origin.value);\n        }\n      }} />\n      <hr />\n      <Input name=\"familyName\" label=\"姓\" rule=\"REQ LEN-0-10\" />\n      <Input name=\"firstName\" label=\"名\" rule=\"REQ LEN-0-10\" />\n      <Input name=\"fullName\" label=\"全名\" rule=\"REQ LEN-0-20\" associations={{\n        fields: [{\n          name: 'familyName'\n        }, {\n          name: 'firstName'\n        }], callback: ({ target, openApi }) => {\n          const { firstName, familyName } = openApi.getFormData();\n          openApi.setFieldValue(target, firstName && firstName ? \\`\\${firstName} \\${familyName}\\` : '');\n        }\n      }} />\n      <hr />\n      <Input name=\"money\" label=\"金额\" />\n      <Input name=\"ratio\" label=\"比例\" />\n      <Input name=\"all\" label=\"总金额\" associations={{\n        fields: [{\n          name: 'money'\n        }, {\n          name: 'ratio'\n        }], callback: ({ target, openApi }) => {\n          const { money, ratio } = openApi.getFormData();\n          openApi.setFieldValue(target, money && ratio && ratio > 0 ? money / ratio : '');\n        }\n      }} />\n      <hr />\n      <div>\n        <button onClick={() => {\n          ref.current.onAdd();\n        }}>添加\n        </button>\n      </div>\n      <GroupList ref={ref} name=\"group\" defaultLength={1}>{({ index, onRemove }) => {\n        return <div>\n          <div>第{index + 1}项</div>\n          <Input name=\"sum\" label=\"数量\" />\n          <button onClick={() => {\n            onRemove();\n          }}>删除\n          </button>\n        </div>;\n      }}</GroupList>\n      <Input name=\"amount\" label=\"总数\" associations={{\n        fields: [{\n          name: 'sum', groupName: 'group'\n        }], callback: ({ target, openApi }) => {\n          const { group } = openApi.getFormData();\n          openApi.setFieldValue(target, (group || []).filter((item) => item.sum > 0).reduce((a, b) => a + parseInt(b.sum), 0));\n        }\n      }} />\n      <div>\n        <SubmitButton>提交</SubmitButton>\n        <ResetButton>重置</ResetButton>\n      </div>\n    </ReactForm>\n  </div>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactForm\",\n    packageName: \"@kne/current-lib_react-form\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `基本示例`,\n    description: `简单的form到input组件的绑定`,\n    code: `const { default: ReactForm, useField, useSubmit, useReset } = _ReactForm;\n\nconst Input = props => {\n  const fieldProps = useField(props);\n\n  return (\n    <div>\n      {fieldProps.label}\n      <input ref={fieldProps.fieldRef} type=\"text\" value={fieldProps.value || ''} onChange={fieldProps.onChange} onBlur={fieldProps.triggerValidate} />\n      {fieldProps.errState}\n      {fieldProps.errMsg}\n    </div>\n  );\n};\n\nconst SubmitButton = ({ children }) => {\n  const { isLoading, onClick } = useSubmit();\n  return (\n    <button onClick={onClick}>\n      {children}\n      {isLoading ? '正在提交中...' : ''}\n    </button>\n  );\n};\n\nconst ResetButton = () => {\n  const { onClick } = useReset();\n  return <button onClick={onClick}>重置</button>;\n};\n\nconst BaseExample = () => {\n  return (\n    <div>\n      <ReactForm\n        debug\n        rules={{\n          REMOTE_RULE: async value => {\n            console.log('>>>>>start');\n            await new Promise(resolve => {\n              setTimeout(() => {\n                resolve();\n              }, 1000);\n            });\n            console.log('>>>>>>>>end');\n            return { result: true };\n          }\n        }}\n        data={{\n          name: '哈哈哈'\n        }}\n        onSubmit={async data => {\n          console.log('>>>>>>>>>>>>>>>');\n          await new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n            }, 3000);\n          });\n          console.log('submit:', data);\n        }}>\n        <Input name=\"name\" label=\"名称\" rule=\"REQ REMOTE_RULE\" />\n        <div>\n          <SubmitButton>提交</SubmitButton>\n          <ResetButton>重置</ResetButton>\n        </div>\n      </ReactForm>\n    </div>\n  );\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactForm\",\n    packageName: \"@kne/current-lib_react-form\",\n    component: component_1\n}]\n}]\n    }\n};\nexport default readmeConfig;\n"],"names":["name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","component"],"sourceRoot":""}