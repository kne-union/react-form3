{"version":3,"file":"static/js/690.5a49015e.chunk.js","mappings":"8MAEA,MCFyD,GAAgBA,UDEpD,CACjBC,KAAM,aACNC,QAAS,sMAMTC,YAAa,6CACbC,YAAa,kBACbC,IAAK,wOAkBLC,QAAS,CACLC,QAAQ,EACRC,UAAW,mBACXC,MAAO,mGAKPC,KAAM,CAAC,CACXC,MAAO,2BACPR,YAAa,kEACbS,KAAM,s0CAmDNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,UAAW,KAEb,CACEH,MAAO,UACPR,YAAa,wCACbS,KAAM,4tEAiENC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,KAEb,CACEH,MAAO,eACPR,YAAa,2CACbS,KAAM,+yEAwENC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,KAEb,CACEH,MAAO,QACPR,YAAa,sCACbS,KAAM,4sHAiHNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,KAEb,CACEH,MAAO,eACPR,YAAa,uCACbS,KAAM,28GA0GNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,SClfFC,EAAW,CAAC,KAAO,aAAa,QAAU,QAAQ,gBAAe,EAAK,aAAa,cAAc,QAAU,CAAC,CAAC,KAAO,aAAa,QAAU,4CAA4C,YAAc,6CAAU,YAAc,oB","sources":["../../README.md","../node_modules/readme/modules.js"],"sourcesContent":["import * as component_1 from '@kne/current-lib_react-form';\nimport * as component_2 from 'antd';\nconst readmeConfig = {\n    name: `react-form`,\n    summary: `<h1>react-form</h1>\n<h3>描述</h3>\n<p>用于表单的校验</p>\n<h3>安装</h3>\n<pre><code class=\"language-shell\">npm i --save @kne/react-form\n</code></pre>`,\n    description: `用于表单的校验`,\n    packageName: `@kne/react-form`,\n    api: `<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>`,\n    example: {\n        isFull: false,\n        className: `react_form_5f21f`,\n        style: `.react_form_5f21f .ant-card {\n  border-color: black;\n  text-align: center;\n  width: 200px;\n}`,\n        list: [{\n    title: `基本示例`,\n    description: `简单的form到input组件的绑定`,\n    code: `const { default: ReactForm, useField, useSubmit, useReset } = _ReactForm;\n\nconst Input = props => {\n  const fieldProps = useField(props);\n\n  return (<div>\n    {fieldProps.label}\n    <input ref={fieldProps.fieldRef} type=\"text\" value={fieldProps.value || ''} onChange={fieldProps.onChange}\n           onBlur={fieldProps.triggerValidate} />\n    {fieldProps.errState}\n    {fieldProps.errMsg}\n  </div>);\n};\n\nconst SubmitButton = ({ children }) => {\n  const { isLoading, onClick } = useSubmit();\n  return (<button onClick={onClick}>\n    {children}\n    {isLoading ? '正在提交中...' : ''}\n  </button>);\n};\n\nconst ResetButton = () => {\n  const { onClick } = useReset();\n  return <button onClick={onClick}>重置</button>;\n};\n\nconst BaseExample = () => {\n  return <div>\n    <ReactForm debug data={{\n      name: '哈哈哈'\n    }} onSubmit={async (data) => {\n      await new Promise((resolve)=>{\n        setTimeout(() => {\n          resolve();\n        },3000);\n      });\n      console.log('submit:', data);\n    }}>\n      <Input name=\"name\" label=\"名称\" rule=\"REQ LEN-0-10\" />\n      <div>\n        <SubmitButton>提交</SubmitButton>\n        <ResetButton>重置</ResetButton>\n      </div>\n    </ReactForm>\n  </div>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactForm\",\n    packageName: \"@kne/current-lib_react-form\",\n    component: component_1\n}]\n},{\n    title: `openApi`,\n    description: `展示openApi的使用`,\n    code: `const { default: ReactForm, useField, useSubmit, useReset } = _ReactForm;\nconst { useRef } = React;\nconst { Button, Space } = antd;\n\nconst Input = props => {\n  const fieldProps = useField(props);\n\n  return (<div>\n    {fieldProps.label}\n    <input ref={fieldProps.fieldRef} type=\"text\" value={fieldProps.value || ''} onChange={fieldProps.onChange}\n           onBlur={fieldProps.triggerValidate} />\n    {fieldProps.errState}\n    {fieldProps.errMsg}\n  </div>);\n};\n\nconst SubmitButton = ({ children }) => {\n  const { isLoading, onClick } = useSubmit();\n  return (<button onClick={onClick}>\n    {children}\n    {isLoading ? '正在提交中...' : ''}\n  </button>);\n};\n\nconst ResetButton = () => {\n  const { onClick } = useReset();\n  return <button onClick={onClick}>重置</button>;\n};\n\nconst BaseExample = () => {\n  const formApiRef = useRef();\n  return <div>\n    <Space>\n      <Button onClick={() => {\n        console.log(formApiRef.current.data);\n      }}>获取表单值</Button>\n      <Button onClick={() => {\n        formApiRef.current.setField({ name: 'name', value: '哈哈哈' });\n      }}>设置字段值</Button>\n      <Button onClick={() => {\n        formApiRef.current.setFields([{ name: 'name', value: '哈哈哈' }, {\n          name: 'name2', value: '哈哈哈2'\n        }, { name: 'name3', value: '哈哈哈3' }]);\n      }}>设置多个字段值</Button>\n      <Button onClick={() => {\n        formApiRef.current.setFieldValidate({\n          name: 'name2', validate: { status: 2, msg: '我是一个通过api设置的错误' }\n        });\n      }}>设置校验信息</Button>\n    </Space>\n    <ReactForm ref={formApiRef}>\n      <Input name=\"name\" label=\"名称\" rule=\"REQ LEN-0-10\" />\n      <Input name=\"name2\" label=\"名称2\" rule=\"REQ LEN-0-10\" />\n      <Input name=\"name3\" label=\"名称3\" rule=\"REQ LEN-0-10\" />\n      <div>\n        <SubmitButton>提交</SubmitButton>\n        <ResetButton>重置</ResetButton>\n      </div>\n    </ReactForm>\n  </div>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactForm\",\n    packageName: \"@kne/current-lib_react-form\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `use-form-api`,\n    description: `展示useFormApi的使用`,\n    code: `const { default: ReactForm, useField, useSubmit, useReset, useFormApi } = _ReactForm;\nconst { useRef } = React;\nconst { Button, Space } = antd;\n\nconst Input = props => {\n  const fieldProps = useField(props);\n  return (<div>\n    {fieldProps.label}\n    <input ref={fieldProps.fieldRef} type=\"text\" value={fieldProps.value || ''} onChange={fieldProps.onChange}\n           onBlur={fieldProps.triggerValidate} />\n    {fieldProps.errState}\n    {fieldProps.errMsg}\n  </div>);\n};\n\nconst SubmitButton = ({ children }) => {\n  const { isLoading, onClick } = useSubmit();\n  return (<button onClick={onClick}>\n    {children}\n    {isLoading ? '正在提交中...' : ''}\n  </button>);\n};\n\nconst ResetButton = () => {\n  const { onClick } = useReset();\n  return <button onClick={onClick}>重置</button>;\n};\n\nconst Options = () => {\n  const { openApi: formApi } = useFormApi();\n\n  console.log(formApi);\n\n  return <Space>\n    <Button onClick={() => {\n      console.log(formApi.getFormData());\n    }}>获取表单值</Button>\n    <Button onClick={() => {\n      formApi.setField({ name: 'name', value: '哈哈哈' });\n    }}>设置字段值</Button>\n    <Button onClick={() => {\n      formApi.setFields([{ name: 'name', value: '哈哈哈' }, {\n        name: 'name2', value: '哈哈哈2'\n      }, { name: 'name3', value: '哈哈哈3' }]);\n    }}>设置多个字段值</Button>\n    <Button onClick={() => {\n      formApi.setFieldValidate({\n        name: 'name2', validate: { status: 2, msg: '我是一个通过api设置的错误' }\n      });\n    }}>设置校验信息</Button>\n  </Space>;\n};\n\nconst BaseExample = () => {\n  const formApiRef = useRef();\n  return <div>\n    <ReactForm ref={formApiRef}>\n      <div><Options /></div>\n      <Input name=\"name\" label=\"名称\" rule=\"REQ LEN-0-10\" />\n      <Input name=\"name2\" label=\"名称2\" rule=\"REQ LEN-0-10\" />\n      <Input name=\"name3\" label=\"名称3\" rule=\"REQ LEN-0-10\" />\n      <div>\n        <SubmitButton>提交</SubmitButton>\n        <ResetButton>重置</ResetButton>\n      </div>\n    </ReactForm>\n  </div>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactForm\",\n    packageName: \"@kne/current-lib_react-form\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `group`,\n    description: `展示group的使用`,\n    code: `const { default: ReactForm, useField, useSubmit, useReset, GroupList } = _ReactForm;\nconst { useRef } = React;\n\nconst Input = props => {\n  const fieldProps = useField(props);\n\n  return (<div>\n    {fieldProps.label}\n    <input ref={fieldProps.fieldRef} type=\"text\" value={fieldProps.value || ''} onChange={fieldProps.onChange}\n           onBlur={fieldProps.triggerValidate} />\n    {fieldProps.errState}\n    {fieldProps.errMsg}\n  </div>);\n};\n\nconst SubmitButton = ({ children }) => {\n  const { isLoading, onClick } = useSubmit();\n  return (<button onClick={onClick}>\n    {children}\n    {isLoading ? '正在提交中...' : ''}\n  </button>);\n};\n\nconst ResetButton = () => {\n  const { onClick } = useReset();\n  return <button onClick={onClick}>重置</button>;\n};\n\nconst BaseExample = () => {\n  const ref = useRef();\n  const formApiRef = useRef();\n  return <div>\n    <div>\n      <button onClick={() => {\n        formApiRef.current.setField({\n          name: 'name', groupName: 'group', groupIndex: 0, value: '设置group字段值'\n        });\n      }}>\n        设置group第一项name字段值\n      </button>\n      <button onClick={() => {\n        formApiRef.current.setField({\n          name: 'name', groupName: 'group', value: '设置group字段值'\n        });\n      }}>\n        设置group所有项name字段值\n      </button>\n      <button onClick={() => {\n        formApiRef.current.setField({\n          groupName: 'group', groupIndex: 0, value: {\n            name: '名称', des: '说明'\n          }\n        });\n      }}>\n        设置group第一项所有字段值\n      </button>\n      <button onClick={() => {\n        formApiRef.current.setFormData({\n          group: [{ name: '第一项' }, { name: '第二项' }, { name: '第三项' }, { name: '第四项' }, { name: '第五项' }]\n        });\n      }}>设置整个表单的值\n      </button>\n    </div>\n    <ReactForm ref={formApiRef} onSubmit={(data) => {\n      console.log('submit:', data);\n    }}>\n      <div>\n        <button onClick={() => {\n          ref.current.onAdd();\n        }}>倒序添加\n        </button>\n      </div>\n      <GroupList ref={ref} name=\"group\">{({ index, onRemove }) => {\n        return <div>\n          <div>第{index + 1}项</div>\n          <Input name=\"name\" label=\"名称\" rule=\"REQ LEN-0-10\" onChange={() => {\n            console.log(index);\n          }} />\n          <Input name=\"des\" label=\"描述\" rule=\"LEN-0-10\" />\n          <GroupList name=\"inner\">{({ index, onRemove }) => {\n            return <div style={{\n              padding: '10px', background: '#eee'\n            }}>\n              <div>第{index + 1}项</div>\n              <Input name=\"name\" label=\"名称\" rule=\"LEN-0-10\" />\n              <Input name=\"des\" label=\"描述\" rule=\"LEN-0-10\" />\n              <button onClick={() => {\n                onRemove();\n              }}>删除子GroupItem\n              </button>\n            </div>;\n          }}</GroupList>\n          <button onClick={() => {\n            onRemove();\n          }}>删除\n          </button>\n        </div>;\n      }}</GroupList>\n      <button onClick={() => {\n        ref.current.onAdd({ isUnshift: false });\n      }}>顺序添加\n      </button>\n      <div>\n        <SubmitButton>提交</SubmitButton>\n        <ResetButton>重置</ResetButton>\n      </div>\n    </ReactForm>\n  </div>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactForm\",\n    packageName: \"@kne/current-lib_react-form\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `associations`,\n    description: `字段关联关系`,\n    code: `const { default: ReactForm, useField, useSubmit, useReset, GroupList } = _ReactForm;\n\nconst { useRef } = React;\n\nconst Input = props => {\n  const fieldProps = useField(props);\n\n  return (<div>\n    {fieldProps.label}\n    <input {...fieldProps.associationOptions} ref={fieldProps.fieldRef} type=\"text\" value={fieldProps.value || ''}\n           onChange={fieldProps.onChange}\n           onBlur={fieldProps.triggerValidate} />\n    {fieldProps.errState}\n    {fieldProps.errMsg}\n  </div>);\n};\n\nconst SubmitButton = ({ children }) => {\n  const { isLoading, onClick } = useSubmit();\n  return (<button onClick={onClick}>\n    {children}\n    {isLoading ? '正在提交中...' : ''}\n  </button>);\n};\n\nconst ResetButton = () => {\n  const { onClick } = useReset();\n  return <button onClick={onClick}>重置</button>;\n};\n\nconst BaseExample = () => {\n  const ref = useRef(null);\n  return <div>\n    <ReactForm debug onSubmit={(data) => {\n      console.log('submit:', data);\n    }}>\n      <Input name=\"name\" label=\"名称\" rule=\"REQ LEN-0-10\" />\n      <Input name=\"des\" label=\"描述\" rule=\"LEN-0-10\" associations={{\n        fields: [{\n          name: 'name'\n        }], callback: ({ target, origin, openApi }) => {\n          openApi.setFieldValue(target, origin.value);\n        }\n      }} />\n      <hr />\n      <Input name=\"familyName\" label=\"姓\" rule=\"REQ LEN-0-10\" />\n      <Input name=\"firstName\" label=\"名\" rule=\"REQ LEN-0-10\" />\n      <Input name=\"fullName\" label=\"全名\" rule=\"REQ LEN-0-20\" associations={{\n        fields: [{\n          name: 'familyName'\n        }, {\n          name: 'firstName'\n        }], callback: ({ target, openApi }) => {\n          const { firstName, familyName } = openApi.getFormData();\n          openApi.setFieldValue(target, firstName && firstName ? \\`\\${firstName} \\${familyName}\\` : '');\n        }\n      }} />\n      <hr />\n      <Input name=\"money\" label=\"金额\" />\n      <Input name=\"ratio\" label=\"比例\" />\n      <Input name=\"all\" label=\"总金额\" associations={{\n        fields: [{\n          name: 'money'\n        }, {\n          name: 'ratio'\n        }], callback: ({ target, openApi }) => {\n          const { money, ratio } = openApi.getFormData();\n          openApi.setFieldValue(target, money && ratio && ratio > 0 ? money / ratio : '');\n        }\n      }} />\n      <hr />\n      <div>\n        <button onClick={() => {\n          ref.current.onAdd();\n        }}>添加\n        </button>\n      </div>\n      <GroupList ref={ref} name=\"group\" defaultLength={1}>{({ index, onRemove }) => {\n        return <div>\n          <div>第{index + 1}项</div>\n          <Input name=\"sum\" label=\"数量\" />\n          <button onClick={() => {\n            onRemove();\n          }}>删除\n          </button>\n        </div>;\n      }}</GroupList>\n      <Input name=\"amount\" label=\"总数\" associations={{\n        fields: [{\n          name: 'sum', groupName: 'group'\n        }], callback: ({ target, openApi }) => {\n          const { group } = openApi.getFormData();\n          openApi.setFieldValue(target, (group || []).filter((item) => item.sum > 0).reduce((a, b) => a + parseInt(b.sum), 0));\n        }\n      }} />\n      <div>\n        <SubmitButton>提交</SubmitButton>\n        <ResetButton>重置</ResetButton>\n      </div>\n    </ReactForm>\n  </div>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactForm\",\n    packageName: \"@kne/current-lib_react-form\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n}]\n    }\n};\nexport default readmeConfig;\n","import ReactForm from '@components/react-form/README.md';export default {ReactForm};\nexport const manifest = {\"name\":\"react-form\",\"version\":\"3.1.1\",\"open-version\":true,\"public-url\":\"/react-form\",\"modules\":[{\"name\":\"react-form\",\"baseDir\":\"/home/runner/work/react-form3/react-form3\",\"description\":\"用于表单的校验\",\"packageName\":\"@kne/react-form\"}]};"],"names":["ReactForm","name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","component","manifest"],"sourceRoot":""}